// The Notices and Disclaimers for Ocean Worlds Autonomy Testbed for Exploration
// Research and Simulation can be found in README.md in the root directory of
// this repository.

// WARNING: This plan cannot work as intended until greater fault/action support
// is added to the simulator. This serves mostly as a syntactic example.

// DESIRED BEHAVIOR: If no faults are present, this plan will pan 180 degrees,
// unstow and then stow the arm. If a fault is injectected during stow or unstow,
// a backup panning action will run until the fault is cleared. It will then attempt 
// the interrupted action again.

// LIMITATIONS: the Stow action will not be attempted again
// after a fault, this is due to limitations in goal fault support that will be 
// added in a later release. The Unstow Action will also sometimes not repeat depending
// on when the fault is triggered. When injecting a fault during an arm operation,
// you should wait until you see the action aborted message before clearing the fault.

// NOTE: If a fault is injected during an operation, that operation will only
// halt immediately if the fault injected is associated with it directly,
// i.e. an antenna fault during panning or an arm fault during
// unstowing or stowing.

#include "plan-interface.h"

LibraryAction MissionSequence (InOut Boolean mission_in_progress,
                               InOut Boolean pan_done,
                               InOut Boolean unstow_done,
                               InOut Boolean stow_done);

FaultHandlingPattern5:
{

  Boolean MissionInProgress = true;

  Boolean PanDone = false;
  Boolean UnstowDone = false;
  Boolean StowDone = false;

  log_info ("Starting FaultHandlingPattern5 plan...");

  RunMission: Concurrence
  {

    End !MissionInProgress;
    log_info ("Starting Mission...");

    LogPanError:
    {
      Start !PanDone && Lookup(AntennaFault);

      log_error ("Panning halted due to an antenna fault.");
    }

    LogUnstowError:
    {
      Start PanDone && !UnstowDone && Lookup(ArmFault);

      log_error ("Unstowing halted due to an arm fault.");
    }

    LogStowError:
    {
      Start UnstowDone && !StowDone && Lookup(ArmFault);

      log_error ("Stowing halted due to an arm fault.");
    }

    BackupPanning:
    {
      Real NewAngle;

      Repeat MissionInProgress;
      Start MissionInProgress && Lookup(ArmFault) && PanDone && !Lookup(AntennaPanFault);
      Skip !MissionInProgress;

      NewAngle = (Lookup(PanDegrees) + 15) mod 360;

      if NewAngle > 180{
        NewAngle = NewAngle - 360;
      }

      LibraryCall Pan (Degrees=NewAngle);

    }

    LibraryCall MissionSequence (mission_in_progress=MissionInProgress,
                         pan_done=PanDone,
                         unstow_done=UnstowDone,
                         stow_done=StowDone);
  }

  log_info ("FaultHandlingPattern5 plan complete.");
}
